<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marius Constantinescu</title>
  <subtitle>Tech blog</subtitle>
  <id>https://mariusc.github.io/</id>
  <link href="https://mariusc.github.io/"/>
  <link href="https://mariusc.github.io/feed.xml" rel="self"/>
  <updated>2017-02-23T20:28:00+00:00</updated>
  <author>
    <name>Marius Constantinescu</name>
  </author>
  <entry>
    <title>Understanding code signing for iOS apps</title>
    <link rel="alternate" href="https://mariusc.github.io/2017-02-23-understanding-code-signing-for-ios-apps.html"/>
    <id>https://mariusc.github.io/2017-02-23-understanding-code-signing-for-ios-apps.html</id>
    <published>2017-02-23T20:28:00+00:00</published>
    <updated>2017-04-20T22:34:27+00:00</updated>
    <author>
      <name>Marius Constantinescu</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;NOTE: This article was first published on the &lt;a href="https://engineering.nodesagency.com/articles/iOS/Understanding-code-signing-for-iOS-apps/"&gt;Nodes Engineering Blog&lt;/a&gt;  in October 2016.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re an iOS developer, most likely you&amp;rsquo;ve had to deal with code signing. And if you&amp;rsquo;re a junior iOS developer, you might&amp;rsquo;ve felt a bit overwhelmed by everything going on in the &amp;ldquo;Certificates, Identifiers &amp;amp; Profiles&amp;rdquo; section of the developer portal.&lt;/p&gt;

&lt;p align=center&gt;&lt;img src="https://d1gwekl0pol55k.cloudfront.net/image/baas/translate_values/hbikk_ospmSpNLyW.gif" /&gt;&lt;/p&gt;

&lt;p&gt;The goal of this article is to help junior iOS developers understand code signing on a higher level. This will not be a step-by-step tutorial on how to code sign your app. Ideally, after reading this article, you will be able to code sign your app without following any tutorials.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t plan to go into lower level details, but we will talk a bit about asymmetric cryptography. &lt;/p&gt;

&lt;h3 id="asymmetric-cryptography"&gt;Asymmetric cryptography&lt;/h3&gt;

&lt;p&gt;The minimum you need to know is that asymmetric cryptography uses a &lt;strong&gt;public key&lt;/strong&gt; and a &lt;strong&gt;private key&lt;/strong&gt;. The users have to keep their private key for themselves, but they can share the public key. And using those public and private keys, a user can prove that he is indeed himself.&lt;/p&gt;

&lt;p&gt;A good high-level explanation of asymmetric cryptography can be found &lt;a href="https://blog.vrypan.net/2013/08/28/public-key-cryptography-for-non-geeks/"&gt;here&lt;/a&gt;. If you want to know implementation details or the math behind this, you can find them online.&lt;/p&gt;

&lt;h3 id="app-id"&gt;App ID&lt;/h3&gt;

&lt;p&gt;The App ID is the unique identifier of your app. It consists of a team id, generated by Apple (you don&amp;rsquo;t have any control over it) and your app&amp;rsquo;s bundle id (&lt;code&gt;com.youcompany.yourapp&lt;/code&gt;, for example). &lt;/p&gt;

&lt;p&gt;There can also be wildcard App IDs: &lt;code&gt;com.yourcompany.*&lt;/code&gt;. Those will match on multiple bundle ids. &lt;/p&gt;

&lt;p&gt;Generally, you will have an explicit App ID, not a wildcard one.&lt;/p&gt;

&lt;h3 id="certificates"&gt;Certificates&lt;/h3&gt;

&lt;p&gt;You have probably already noticed that in order to create a certificate in Apple&amp;rsquo;s developer portal, you need to upload a Certificate Signing Request. You can generate this CSR from the Keychain, and this CSR contains a private key.&lt;/p&gt;

&lt;p&gt;Then on the developer portal, you can create a certificate using this CSR. &lt;/p&gt;

&lt;p&gt;There can be multiple types of certificates. The most common are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Development (iOS App Development) - You need those to run your app on a device from Xcode. &lt;/li&gt;
&lt;li&gt;Distribution (App Store and Ad Hoc) - You need those to be able to distribute your app through the App Store or Ad Hoc&lt;/li&gt;
&lt;li&gt;APNS (Apple Push Notification Service)  - You need those to be able to send push notifications to your app. Unlike Development or Distribution certificates, APNS certificates are associated with an App ID. There can be 2 types of APNS certificates, for development - Apple Push Notification service SSL (Sandbox), and for production - Apple Push Notification service SSL (Sandbox &amp;amp; Production). You need to create both of them if you want push notifications to work on both debug and distribution builds. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="devices"&gt;Devices&lt;/h3&gt;

&lt;p&gt;You can add up to 100 devices per product family per membership year to your account. 100 iPhones, 100 iPads, 100 iPod Touch, 100 Apple Watches and 100 Apple TVs. To add a device to your account, you need to add its unique device ID. You can easily find that in Xcode, or (a bit more complicated) in iTunes. A detailed guide on how to add devices to your account can be found &lt;a href="https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingProfiles/MaintainingProfiles.html#//apple_ref/doc/uid/TP40012582-CH30-SW10"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="provisioning-profiles"&gt;Provisioning profiles&lt;/h3&gt;

&lt;p&gt;The provisioning profile is what associates an App ID with a certificate and, for development or ad hoc distribution, with some devices. You create the provisioning profiles on the Apple developer portal and you download them in Xcode.&lt;/p&gt;

&lt;h3 id="usage"&gt;Usage&lt;/h3&gt;

&lt;p&gt;After you have created all these, you can then go to Xcode, add your certificates, refresh your provisioning profiles and then select the provisioning profile you want. You can then select the desired signing identity (based on the certificate associated with it) from that provisioning profile.&lt;/p&gt;

&lt;h3 id="f-a-q"&gt;F.A.Q.&lt;/h3&gt;

&lt;p&gt;Over the years working in iOS development, I&amp;rsquo;ve asked and I&amp;rsquo;ve been asked many questions about code signing. Here are some of them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: I have downloaded the provisioning profiles and certificates from the developer portal, but I can&amp;rsquo;t sign the app.&lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt;: Yes, because you don&amp;rsquo;t have the private key, the one that was in the certificate signing request. Most likely, another team member created those certificates and provisioning profiles before. You can get the private key from the original developer, revoke the certificate and generate a new one (which will break all provisioning profiles associated with that certificate, but not any App Store apps using those) or create a new one if possible (currently, there&amp;rsquo;s a maximum of 3 distribution certificates allowed per account).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: What about the push certificates? I want my app to receive push notifications. Shouldn&amp;rsquo;t I create a provisioning profile that uses the APNS certificate?&lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt;: No. When you create an APNS (Apple Push Notification Service) certificate, you associate that with an App ID. So, first you have your CSR, then you create a new APNS certificate with that CSR, download it, open it in Keychain and export it as .p12, which you later upload to your push notification provider. The .p12 file will know that it&amp;rsquo;s associated with that app, and it will send pushes to that app only. That&amp;rsquo;s also a reason why you can&amp;rsquo;t associate an APNS certificate with a wildcard App ID (com.youcompany.*). The push notification server needs to know to which app it sends the notifications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: I bought a new mac, what should I export from the keychain of my old mac for all the code signing to work on the new one?&lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt;: You would probably want all your keychain to be exported to the new mac. You can do that by following &lt;a href="https://support.apple.com/kb/PH20120?locale=en_US"&gt;these steps&lt;/a&gt;. But if you want to export one certificate, make sure you also export its private key. In the Keychain, you have to be able to expand the certificate by pressing on the arrow next to it, and you should see a key. Those certificates are the ones that can be exported as .p12 files. Otherwise, they&amp;rsquo;ll be exported as .cer, without a private key, and they&amp;rsquo;ll be pretty much useless.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: My iOS distribution certificate expired, will my app still work?&lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt;: When your certificate expires, the provisioning profiles using that certificate will become invalid. On App Store, the app will still work as long as you&amp;rsquo;re enrolled in the development program. All the ad hoc builds signed with that certificate won&amp;rsquo;t work anymore.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: My APNS certificate expired, what happens now?&lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt;: You won&amp;rsquo;t be able to send push notifications to the app anymore. This can be fixed by creating a new APNS certificate associated with that App ID, downloading it, exporting its .p12 and uploading it to your push notification service provider. No need for an app update.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="summary"&gt;Summary&lt;/h3&gt;

&lt;p&gt;The key points I want to highlight about code signing are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each app has an &lt;strong&gt;App ID&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;You need to have the &lt;strong&gt;private keys&lt;/strong&gt; for all the certificates you use.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;debug provisioning profile&lt;/strong&gt; associates your development certificate with your App ID and the devices.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;ad hoc provisioning profile&lt;/strong&gt; associates your distribution certificate with your App ID and the devices.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;app store provisioning profile&lt;/strong&gt; associates your distribution certificate with your App ID.&lt;/li&gt;
&lt;li&gt;For push notifications, create an &lt;strong&gt;APNS certificate&lt;/strong&gt; associated with your App ID, then download it, export it as .p12 and upload the .p12 to your push notification service provider; if you want push notifications both on debug and production builds, you have to create 2 APNS certificates, one for development and one for production.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Understanding these will help you understand code signing and save you a lot of time in the end. &lt;/p&gt;

&lt;p align=center&gt;&lt;img src="https://d1gwekl0pol55k.cloudfront.net/image/baas/translate_values/success_YGu5HHLDK6.jpg" width = 50% /&gt;&lt;/p&gt;

&lt;h3 id="further-reading"&gt;Further reading&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.objc.io/issues/17-security/inside-code-signing/"&gt;Inside code signing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/support/code-signing/"&gt;Code Signing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/ios-os-x-development/ios-code-signing-provisioning-in-a-nutshell-d5b247760bef"&gt;iOS Code Signing &amp;amp; Provisioning in a Nutshell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Being more efficient in Xcode - Part 2</title>
    <link rel="alternate" href="https://mariusc.github.io/2016-10-09-being-more-efficient-in-xcode-part-2.html"/>
    <id>https://mariusc.github.io/2016-10-09-being-more-efficient-in-xcode-part-2.html</id>
    <published>2016-10-09T10:25:00+00:00</published>
    <updated>2017-04-20T22:34:27+00:00</updated>
    <author>
      <name>Marius Constantinescu</name>
    </author>
    <content type="html">&lt;p&gt;This is my second article in the &amp;ldquo;Being more efficient in Xcode&amp;rdquo; series. The first part, which you can read &lt;a href="http://mariusc.github.io/2016-08-29-being-more-efficient-in-xcode-part-1.html"&gt;here&lt;/a&gt;, was focused on keyboard shortcuts. &lt;/p&gt;

&lt;p&gt;Besides the keyboard shortcuts, there are other tips and tricks an iOS developer should know, to be able to improve his productivity when using Xcode.&lt;/p&gt;

&lt;h3 id="breakpoints"&gt;Breakpoints&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s a pretty good idea to add an &amp;lsquo;All exceptions&amp;rsquo; breakpoint. This way, when your app crashes, you&amp;rsquo;ll get stopped exactly when that happens and you can see the whole backtrace and debug the problem more easily. A good idea is to also add a debugger command action on that breakpoint to print the exception you&amp;rsquo;re encountering. Open the breakpoint in the Breakpoint navigator, right click your All exception breakpoint, press Edit, press Add action and add this debugger command &lt;code&gt;po $arg1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src = "img/blogposts/inline/XcodeShortcuts/backFwd.png" class="img-responsive"/&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;However, sometimes (especially if you&amp;rsquo;re using Swift), you might notice that your app always stops in the AppDelegate when launching it. You can manually continue over that, but it&amp;rsquo;s still annoying. To stop that from happening, you can edit your exceptions breakpoint to only stop for Objective-C exceptions, ignoring other types of exceptions such as C++ ones. Depending on your project, this could be a bad idea, but in most cases it will be fine. &lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src = "img/blogposts/inline/XcodeShortcuts2/objc_exceptions_breakopint.png" class="img-responsive"/&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;You can also use breakpoints to print variables: just add a po command.&lt;/p&gt;

&lt;h3 id="editor"&gt;Editor&lt;/h3&gt;

&lt;p&gt;As we all know and we&amp;rsquo;ve all been complaining about, there&amp;rsquo;s no refactoring in Swift. There is, however, a better-than-nothing alternative, which in some cases can be used instead of rename-refactoring. Select a variable (double click on it), go to Editor - Edit all in scope. Enter the new name and it will be renamed everywhere in the current scope. &lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src = "img/blogposts/inline/XcodeShortcuts2/EditAllInScope.gif" class="img-responsive"/&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;As the name says, this only edits in the current scope.&lt;/p&gt;

&lt;p&gt;Another command that affects only the current scope is &amp;#39;Fix all in scope&amp;rsquo;. This makes the changes suggested by Xcode for all the warnings and errors. This also only affects the current scope. And sometimes, Xcode&amp;rsquo;s suggestions are not exactly what you had in mind. Nevertheless, this command can still be useful sometimes.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src = "img/blogposts/inline/XcodeShortcuts2/FixAllInScope.gif" class="img-responsive"/&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id="code-structure"&gt;Code structure&lt;/h3&gt;

&lt;p&gt;Use the Document items list. Open the list (either press on it, or use the shortcut control - 6) and you can see all the classes, extensions, methods, etc in your file. If you start typing, it will begin filtering them in a way similar to quick open, but it will search for entries inside the currently open file. &lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src = "img/blogposts/inline/XcodeShortcuts2/ListOfMethods.gif" class="img-responsive"/&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also a very good idea to use &lt;code&gt;//MARK:&lt;/code&gt; in your source. This allows you to organize the methods and other items in your code in a better way. They&amp;rsquo;re also visible in the Document items list. And also, if for example you have a &lt;code&gt;//MARK: - UITableViewDelegate&lt;/code&gt; you can command - click on the &lt;code&gt;UITableViewDelegate&lt;/code&gt; and it will take you to the UITableView interface, where you can see all the available methods and their documentation.&lt;/p&gt;

&lt;h3 id="interface-builder"&gt;Interface builder&lt;/h3&gt;

&lt;p&gt;And one last tip about interface builder. Did you ever need, for example, to move a button on top of another view, but not make it a subview of that view? By default, when you drop a button over a view, IB will make the button a subview of that view and you will also lose all its positioning constraints. But if you press &lt;strong&gt;⌘&lt;/strong&gt; while dropping the button, it will not be a subview, but a sibling of that view.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src = "img/blogposts/inline/XcodeShortcuts2/Cmd.gif" class="img-responsive"/&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;There are lots of shortcuts in Xcode, and lots of things you can do to increase your speed when using it. The important thing is to take them one at a time.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>NSSpain 2016</title>
    <link rel="alternate" href="https://mariusc.github.io/2016-09-28-nsspain-2016.html"/>
    <id>https://mariusc.github.io/2016-09-28-nsspain-2016.html</id>
    <published>2016-09-28T11:19:00+00:00</published>
    <updated>2017-04-20T22:34:27+00:00</updated>
    <author>
      <name>Marius Constantinescu</name>
    </author>
    <content type="html">&lt;p&gt;At the end of 2014, I decided to try and attend at least one iOS conference per year. And after &lt;a href="http://2015.mceconf.com/"&gt;MCE 2015&lt;/a&gt;, this year I chose &lt;a href="http://2016.nsspain.com/"&gt;NSSpain&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;NSSpain is a conference I&amp;rsquo;ve been eyeing for a while, I&amp;rsquo;ve followed it closely in 2014 and 2015, seriously considered to attend, but due to one reason or another, I didn&amp;rsquo;t do it. &lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Sad to miss &lt;a href="https://twitter.com/NSSpain"&gt;@NSSpain&lt;/a&gt; again. Looks like the best combination between iOS and wine. I really hope I can be there in 2016.&lt;/p&gt;&amp;mdash; MariusConstantinescu (@marius_const) &lt;a href="https://twitter.com/marius_const/status/643683417230561280"&gt;September 15, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;This year I was so determined to be there that I got a ticket as soon as they started selling them.&lt;/p&gt;

&lt;h2 id="nsspain"&gt;NSSpain&lt;/h2&gt;

&lt;p&gt;NSSpain takes place in the city of Logroño, in northern Spain, in the Rioja region (yes, the one that produces the great wine). The conference is organised by &lt;a href="https://twitter.com/Lascorbe"&gt;Luis&lt;/a&gt; and &lt;a href="https://twitter.com/borjareinares"&gt;Borja&lt;/a&gt;, two great people who I got the pleasure to meet. Although there were some minor hiccups in the organisation now and then, the quality of the conference is amazing for something put together by 2 persons in their own free time.&lt;/p&gt;

&lt;p&gt;The event was spread over 3 days: one workshop day (for 40 persons) and 2 conference days (with more than 200 people taking part).&lt;/p&gt;

&lt;p&gt;From the workshops day, I must highlight &lt;a href="https://twitter.com/jdortiz"&gt;Jorge Ortiz&lt;/a&gt;&amp;rsquo;s architecture workshop. It was informative, high quality and on the subject.&lt;/p&gt;

&lt;p&gt;During the 2 actual conference days, I attended all 21 sessions, and I was impressed by most of the talks. There were some that, in my opinion, failed to deliver, but there weren&amp;rsquo;t that many and they didn&amp;rsquo;t change my overall impression of the conference. &lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll shortly write about 3 talks that I think are worth mentioning.&lt;/p&gt;

&lt;h4 id="the-road-to-cocoapods-1-0"&gt;The Road to CocoaPods 1.0&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://twitter.com/segiddins"&gt;Samuel Giddins&lt;/a&gt; has been the lead developer of the CocoaPods project for the last two years or so. CocoaPods is a huge project, indexing over 23000 libraries that are used in more of 1.1 million apps. It has 8500 stars on GitHub, and it has had in total almost 5000 issues. There are around 400 contributors who worked on this project during the 5 years of its existence. Imagine being the lead developer for a project this size. And doing that in your free time. &lt;/p&gt;

&lt;p&gt;Samuel told us the road to CocoaPods 1.0, with all its ups and downs. And towards the end of the talk, Samuel announced that he&amp;rsquo;s stepping down as lead developer, letting others take that role. At the end of his talk, the organisers showed a video message for Samuel from &lt;a href="https://twitter.com/alloy"&gt;Eloy Durán&lt;/a&gt;, the previous lead developer of CocoaPods and Samuel&amp;rsquo;s mentor. It was an emotional moment, and this was definitely the talk that got the most applauses. And they were not &amp;ldquo;what a great talk&amp;rdquo; applauses, they were well deserved &amp;ldquo;thanks for everything&amp;rdquo; applauses. &lt;/p&gt;

&lt;p&gt;This talk reminded us that, although CocoaPods makes the lives of hundreds of thousands of developers easier, the biggest thing it did for the iOS development industry is that it shaped the community into what it is today. And that is much more important. &lt;/p&gt;

&lt;h4 id="the-design-of-everyday-language-apps"&gt;The Design of Everyday Language Apps&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://www.twitter.com/natasha_nazari"&gt;Natasha Nazari&lt;/a&gt; gave a talk about designing a language learning app (&lt;a href="https://speakerdeck.com/natashanazari/the-design-of-everyday-language-apps"&gt;slides here&lt;/a&gt;). The talk was very informative and it drew attention towards some things that developers don&amp;rsquo;t usually give much thought to: making your app usable by people everywhere. &lt;/p&gt;

&lt;p&gt;A short story she told stuck with me. She was learning Chinese through a language learning app. And although she mastered 2000 Chinese characters, when she got to Taipei she couldn&amp;rsquo;t recognise most of them, because the handwriting used in Taipei different than the font in the language learning app she was using. It&amp;rsquo;s minor things like varying the font in the app which make a big difference in this case. &lt;/p&gt;

&lt;p&gt;I really enjoyed the talk. Most topics discussed at this kind of conferences are architecture, testing, new, better approaches to doing the same old things. We don&amp;rsquo;t talk enough about localisation, about thinking of your users, about all the different scenarios your app can be used in, and about making your app useful for more people. We need more of this.&lt;/p&gt;

&lt;h4 id="burnout"&gt;Burnout&lt;/h4&gt;

&lt;p&gt;The organisers also prepared a round of lightning talks. And I was really impressed by &lt;a href="https://twitter.com/icanzilb"&gt;Marin Todorov&lt;/a&gt;&amp;rsquo;s. Marin is a successful iOS developer, instructor and book author, probably one of the most appreciated in our community. He gave a talk about burnout. He showed that burnout can happen to everyone, and we need to be better at preventing it and at helping others who are dealing with it. Burnout is more common than we want to admit in our industry, and seeing well-known developers draw attention to it and talk about it will hopefully make us more aware of burnout and help us prevent it for ourselves and for our friends and colleagues. &lt;/p&gt;

&lt;p&gt;Please, read Marin&amp;rsquo;s talk &lt;a href="https://medium.com/@marin.todorov/burnout-awareness-at-nsspain-6b852b1222d4"&gt;turned into a blogpost&lt;/a&gt; and share it with your colleagues.&lt;/p&gt;

&lt;h2 id="activities"&gt;Activities&lt;/h2&gt;

&lt;p&gt;Besides the workshops and the talks, there were other things that the organisers prepared for us. Lunch was offered for participants, in the same venue as the conference, so we could socialise and meet other people every day at lunch. And the food was very good. Also, big thumbs up for serving wine at lunch 🍷. &lt;/p&gt;

&lt;p&gt;In the first evening, after the workshops ended, we had a guided tour of the city. Very informative, and a good way to find out more tips about the local tapas bars. This was also our introduction to Calle del Laurel, a street famous for its tapas bars. &lt;/p&gt;

&lt;p&gt;And the last day, after lunch, Marin Todorov organised a presentation karaoke. Participants volunteered to be on stage and give a presentation based on some slides that they&amp;rsquo;ve never seen before and that were so unrelated to each other, unexpected and hilarious that we, in the audience, just couldn&amp;rsquo;t stop laughing. The best talk was considered to be &lt;a href="https://twitter.com/ynzc"&gt;Yvette&lt;/a&gt;&amp;rsquo;s, who won a ticket to next year&amp;rsquo;s NSSpain. A ticket that she&amp;rsquo;s willing to donate to someone from an underrepresented category who&amp;rsquo;s starting in iOS.&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Hey &lt;a href="https://twitter.com/NSSpain"&gt;@nsspain&lt;/a&gt; &lt;a href="https://twitter.com/Lascorbe"&gt;@lascorbe&lt;/a&gt; &lt;a href="https://twitter.com/borjareinares"&gt;@borjareinares&lt;/a&gt;. Can we make this happen? P.S. Doesn’t mean I won’t be there  &lt;a href="https://twitter.com/hashtag/nsspain16?src=hash"&gt;#nsspain16&lt;/a&gt; &lt;a href="https://t.co/Ypjpiypr4P"&gt;pic.twitter.com/Ypjpiypr4P&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yvette (@ynzc) &lt;a href="https://twitter.com/ynzc/status/776802131974193152"&gt;September 16, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2 id="san-mateo"&gt;San Mateo&lt;/h2&gt;

&lt;p&gt;Another great thing about NSSpain is that the day after NSSpain ends, the 1-week long San Mateo wine festival begins. This is the biggest festivity of the year in Logroño. People roam the streets, dance, sing, there are marching bands, the tapas bars are full, everybody drinks wine and eats traditional tapas. It&amp;rsquo;s a crazy feast where the whole city centre turns into a big ambulant party. Many of the NSSpain attendees and speakers also stay for the first weekend of the festival.&lt;/p&gt;

&lt;h2 id="aftermath"&gt;Aftermath&lt;/h2&gt;

&lt;p&gt;What I really enjoy about conferences is the atmosphere. You get to meet so many people that are in the same line of work as you are, and the amount of inspiration you can get is incredible. You can gain so much just by talking to people.&lt;/p&gt;

&lt;p&gt;But besides that, there&amp;rsquo;s also another positive side effect: when you&amp;rsquo;re back, you just want to do things, try all the stuff you learned about, play with new frameworks and SDKs, you feel full of energy, very motivated and very productive. &lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src = "img/blogposts/inline/nsspain_speakers.jpg" class="img-responsive"/&gt;&lt;/center&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id="parts-of-this-blogpost-will-also-be-used-for-an-article-on-the-nodes-blog"&gt;&lt;em&gt;Parts of this blogpost will also be used for an article on the &lt;a href="https://www.nodesagency.com/blog/"&gt;Nodes blog&lt;/a&gt;&lt;/em&gt;&lt;/h5&gt;
</content>
  </entry>
  <entry>
    <title>Being more efficient in Xcode - Part 1</title>
    <link rel="alternate" href="https://mariusc.github.io/2016-08-29-being-more-efficient-in-xcode-part-1.html"/>
    <id>https://mariusc.github.io/2016-08-29-being-more-efficient-in-xcode-part-1.html</id>
    <published>2016-08-29T07:36:00+00:00</published>
    <updated>2017-04-20T22:34:27+00:00</updated>
    <author>
      <name>Marius Constantinescu</name>
    </author>
    <content type="html">&lt;p&gt;One way to increase your productivity as a developer is to know very well your IDE. Xcode is the IDE I&amp;rsquo;ve always used for developing iOS projects. While it still has some problems, and is lacking basic features such as Swift refactoring, it also has lots of cool features. Using Xcode faster and better is a great way to speed up a bit your development process, and keyboard shortcuts are the best way to start doing that.&lt;/p&gt;

&lt;p&gt;For this article, I&amp;rsquo;ll be using the classic notations: &lt;strong&gt;⌘&lt;/strong&gt; - command, &lt;strong&gt;^&lt;/strong&gt; - control, &lt;strong&gt;⌥&lt;/strong&gt; - alt (option), &lt;strong&gt;⇧&lt;/strong&gt; - shift, &lt;strong&gt;↑&lt;/strong&gt; - up arrow, &lt;strong&gt;↓&lt;/strong&gt; - down arrow, &lt;strong&gt;→&lt;/strong&gt; - right arrow, &lt;strong&gt;←&lt;/strong&gt; - left arrow. For the sake of clarity, I will be writing the letters in the keyboard shortcuts in capitals. This doesn&amp;rsquo;t mean that they have to be capital letters, lowercase letters are the ones you need in that keyboard shortcut command.&lt;/p&gt;

&lt;p&gt;In my opinion, it&amp;rsquo;s very important to read this article just to inform yourself on what keyboard shortcuts you could use, and not try to learn them all at once. Trying to remember too many shortcuts at once could probably end up confusing you  and decreasing your productivity and speed. Here are the shortcuts I use most often in Xcode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Basic editor shortcuts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Xcode&amp;rsquo;s source code editor has all the usual keyboard shortcuts you would expect: &lt;strong&gt;⌘N&lt;/strong&gt;, &lt;strong&gt;⌘O&lt;/strong&gt;, &lt;strong&gt;⌘S&lt;/strong&gt;, &lt;strong&gt;⌘C&lt;/strong&gt;, &lt;strong&gt;⌘V&lt;/strong&gt;, &lt;strong&gt;⌘X&lt;/strong&gt;, &lt;strong&gt;⌘Z&lt;/strong&gt;, etc. All those are so common to almost every application and they&amp;rsquo;re spread system-wide, that I&amp;rsquo;m not going to waste time talking about them. (Small side note, I never use &lt;strong&gt;⌘N&lt;/strong&gt; in Xcode, because I prefer to right click the group where I want the new file to be placed and select &amp;ldquo;New file&amp;rdquo; there. This way, the new file will be created where I want it to, and I don&amp;rsquo;t have to move it myself afterwards in the group where it belongs). There&amp;rsquo;s also &lt;strong&gt;⌘F&lt;/strong&gt; for &amp;ldquo;Find in current file&amp;rdquo;, and &lt;strong&gt;⌘⇧F&lt;/strong&gt; for &amp;ldquo;Find in Project&amp;rdquo;. I use these pretty often. For indentation, there&amp;rsquo;s &lt;strong&gt;⌘[&lt;/strong&gt; and &lt;strong&gt;⌘]&lt;/strong&gt; to indent left or right. Those are all very common shortcuts and not necessarily particular to Xcode. The ones that follow here are the Xcode specific ones I use most often.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Navigation shortcuts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You know how you can go back and forward in Xcode, to show the file you had opened before or the one you came back from? You can do that using the arrow buttons in Xcode, in the toolbar of the editing area. &lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src = "img/blogposts/inline/XcodeShortcuts/backFwd.png" class="img-responsive"/&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;You can also swipe with two fingers left or right in the editing area (unless you have a storyboard open and swiping left or right actually pans it). Swiping it also gives it a transition animation, which takes around one second. Not very efficient, but pretty cool. However, you can press &lt;strong&gt;⌘^←&lt;/strong&gt; and &lt;strong&gt;⌘^→&lt;/strong&gt; to get the same result. And this comes without the animation (so, faster) and without moving your hands from the keyboard. I learnt this shortcut from &lt;a href="https://twitter.com/tobiasdm"&gt;Tobias Due Munk&lt;/a&gt; at an NSCoderNight some years ago.&lt;/p&gt;

&lt;p&gt;Back in the days when we were doing Objective-C, there was also &lt;strong&gt;⌘^↑&lt;/strong&gt; and &lt;strong&gt;⌘^↓&lt;/strong&gt;, to switch between the .h and the .m files of the same class. I&amp;rsquo;ve been using that a lot and I found it very convenient, but when I switched to Swift one and a half years ago I didn&amp;rsquo;t need it anymore.&lt;/p&gt;

&lt;p&gt;Probably the shortcut I use most is quick open: &lt;strong&gt;⌘⇧O&lt;/strong&gt;. This pops up a dialogue similar to Spotlight in macOS and searches for a file you want as you type its name. I find this a super convenient and fast way to open the files I need. This feature is a bit broken in the latest Xcode release (it seems that it still focuses on the file that matches your search string most closely, but the list of results is scrolled to a wrong position), but I hope it will be fixed soon. Even with this minor glitch, I still use it every time. I learned this shortcut from &lt;a href="https://twitter.com/kasperwelner"&gt;Kasper Welner&lt;/a&gt; when I started at &lt;a href="https://nodesagency.com"&gt;Nodes&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src = "img/blogposts/inline/XcodeShortcuts/quickopen2.gif" class="img-responsive"/&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Another one I learnt from Kasper is &lt;strong&gt;⌘L&lt;/strong&gt; in a source file, which opens a dialogue similar to the quick open one, in which you type a line number, press enter and you&amp;rsquo;re taken to that line in the file you currently have open. Very handy when you know exactly which line number you want to go to, but that&amp;rsquo;s rarely the case.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src = "img/blogposts/inline/XcodeShortcuts/jumpToLine2.gif" class="img-responsive"/&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using the Assistant Editor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Xcode has this thing called the Assistant Editor, which splits the editing area vertically into two and shows a file on the right side. This is one of the most known features, even for beginners, because you use this to drag outlets and actions from Interface Builder. The special key that triggers the assistant editor is &lt;strong&gt;⌥&lt;/strong&gt;. &lt;strong&gt;⌥ - click&lt;/strong&gt; on a file and it will open in the assistant editor. Even if you don&amp;rsquo;t have the assistant editor open (the 2 column editing area), it will switch to that and open the file you right-clicked on the right side. &lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src = "img/blogposts/inline/XcodeShortcuts/altClick2.gif" class="img-responsive"/&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;As in any IDE, you can &lt;strong&gt;⌘ - click&lt;/strong&gt; on a class or method to view its declaration (or definition). Well, in Xcode you can &lt;strong&gt;⌘⌥ - click&lt;/strong&gt; on a class or method to view its declaration in the assistant editor.&lt;/p&gt;

&lt;p&gt;You can also combine the assistant editor with the quick open. &lt;strong&gt;⌘⇧O&lt;/strong&gt; for quick open, type the name of your class, then &lt;strong&gt;⌥- enter&lt;/strong&gt; to open it in the assistant editor.&lt;/p&gt;

&lt;p&gt;To close the assistant editor and use a single - column editor view, press &lt;strong&gt;⌘ - enter&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The assistant editor is great and I use it a lot. However, on a small screen, the assistant editor is annoyingly small, but on a big one, it can really make a difference.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other editor shortcuts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using the quick open to open files means that you won&amp;rsquo;t always have the file you&amp;rsquo;re currently editing highlighted in the project navigation area on the left. If you want to see it there, you can always press &lt;strong&gt;⌘⇧J&lt;/strong&gt; to open any groups, subgroups necessary and highlight the file you&amp;rsquo;re currently editing.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src = "img/blogposts/inline/XcodeShortcuts/cmdShiftJ2.gif" class="img-responsive"/&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;You can &lt;strong&gt;⌘/&lt;/strong&gt; on one or many lines to comment them. For me, sometimes, this keyboard shortcut fails, and I have to go to Editor - Structure - Comment selection. Then the keyboard shortcut works again. I don&amp;rsquo;t know what causes this, but I hope it gets fixed soon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Product shortcuts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we&amp;rsquo;re done with the navigation keyboard shortcuts, let&amp;rsquo;s go quickly through the Product ones. &lt;strong&gt;⌘B&lt;/strong&gt; builds the project. &lt;strong&gt;⌘R&lt;/strong&gt; runs the project. &lt;strong&gt;⌘.&lt;/strong&gt; stops it and &lt;strong&gt;⌘U&lt;/strong&gt; runs the tests (I thought of Unit tests to remembering this shortcut. &lt;strong&gt;⌘T&lt;/strong&gt; will just open a new tab)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finally&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it from me regarding keyboard shortcuts as ways to improve your Xcode productivity. Again, I want to emphasise that trying to remember all the shortcuts at once after reading this article will probably accomplish nothing. So choose one or two shortcuts that you feel you need the most, remember them, use them as much as possible for 2 weeks or so, until they&amp;rsquo;ve become a reflex, and then come back and learn some more shortcuts. &lt;/p&gt;

&lt;p&gt;Those are definitely not the only shortcuts. They&amp;rsquo;re the ones I use most. For a complete list of shortcuts, see &lt;a href="https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/xcode_help-command_shortcuts/MenuCommands/MenuCommands014.html"&gt;Apple&amp;rsquo;s documentation&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>My first iOS app</title>
    <link rel="alternate" href="https://mariusc.github.io/2016-04-12-my-first-ios-app.html"/>
    <id>https://mariusc.github.io/2016-04-12-my-first-ios-app.html</id>
    <published>2016-04-12T19:01:00+00:00</published>
    <updated>2017-04-20T22:34:27+00:00</updated>
    <author>
      <name>Marius Constantinescu</name>
    </author>
    <content type="html">&lt;p&gt;This week I read Becky Hansmeyer&amp;rsquo;s article &lt;a href="http://beckyhansmeyer.com/2016/04/09/we-all-have-to-start-somewhere/"&gt;&amp;ldquo;We all have to start somewhere&amp;rdquo;&lt;/a&gt;, and it surprised me. Becky says she only knows one person in real life that develops iOS apps. &lt;/p&gt;

&lt;p&gt;My first contact with iOS development was during my BSc. studies. We were a bunch of students and a passionate teaching assistant, and we were learning iOS development on our own, outside of the university curriculum, following Paul Hegarty&amp;rsquo;s Stanford CS193P course on iTunes U. &lt;/p&gt;

&lt;p&gt;Hearing that there are iOS developers who only know one other iOS developer in real life made me realise that I was fortunate to not be alone in my journey. This makes me put even more value on our great iOS community, on all the knowledge that is shared out there through blog posts, video talks, open source apps, libraries and frameworks, and also on all the conferences and meetups that enable developers to meet each other.&lt;/p&gt;

&lt;p&gt;Regarding Becky&amp;rsquo;s challenge, it&amp;rsquo;s hard to say what my very first iOS app was. The very first iOS app I wrote and compiled was probably a calculator, one of the first homeworks on Paul Hegarty course. &lt;/p&gt;

&lt;p&gt;The first project I did on my own (without it being an assignment) was a Cocos2D game, inspired by the &lt;a href="http://www.helicoptergame.net/"&gt;2d flash helicopter game&lt;/a&gt;. The user could control a bird and had to avoid flying too high, too low or crashing into baloons.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src = "img/blogposts/inline/birdie.png" class="img-responsive"/&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;All the graphic resources used in the game were found online. I&amp;rsquo;m not sure if they were in the public domain or not, but I never wanted to publish the game, I just wanted to learn. That was also the moment when I realised it&amp;rsquo;s very hard to create iOS games without also having a graphics designer in your team.&lt;/p&gt;

&lt;p&gt;And if it comes to the first app I worked on that made it to the App Store, then it must be &lt;a href="https://itunes.apple.com/us/app/georeporter/id487304759?mt=8"&gt;GeoReporter&lt;/a&gt;, my Google Summer of Code 2013 project.&lt;/p&gt;

&lt;p&gt;Yes, we all start somewhere. Not everybody starts in the same place. But fortunately, we have lots of examples in the community showing that it doesn&amp;rsquo;t really matter where you start as long as you love what you&amp;rsquo;re doing and you&amp;rsquo;re doing your best&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How I got my first job as an iOS developer</title>
    <link rel="alternate" href="https://mariusc.github.io/2016-02-03-how-i-got-my-first-job-as-an-ios-developer.html"/>
    <id>https://mariusc.github.io/2016-02-03-how-i-got-my-first-job-as-an-ios-developer.html</id>
    <published>2016-02-03T19:48:00+00:00</published>
    <updated>2017-04-20T22:34:27+00:00</updated>
    <author>
      <name>Marius Constantinescu</name>
    </author>
    <content type="html">&lt;p&gt;I read &lt;a href="https://twitter.com/orta"&gt;@orta&lt;/a&gt;&amp;rsquo;s excellent &lt;a href="http://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews/"&gt;article&lt;/a&gt; about how to get your first job as an iOS developer, and that made me think a bit about the process through which I got my first iOS job.&lt;/p&gt;

&lt;p&gt;In 2013, I took part in the Google Summer of Code as a member of the City of Bloomington organization. My task was to work on their open source iOS app for non-emergency issue reporting. If I remember correctly, that was the only proposal I sent, because I really wanted to work as an iOS developer and that position in the City of Bloomington organization was the only one that interested me.&lt;/p&gt;

&lt;p&gt;Before that, I had some very basic iOS experience: I watched some of Paul Hegarty&amp;rsquo;s course at Stanford on iTunes U and my bachelor thesis project was an iPad app. Besides that, I also had a pretty solid background in Computer Science. But the GSoC experience was when I actually dived head first into iOS programming. At the end of the summer, I had 3 months of iOS experience, some pretty good open source contribution, a nice thing to add to my iOS developer portfolio and 2 recommendations from my GSoC mentors.&lt;/p&gt;

&lt;p&gt;After GSoC, I started looking for a part time job as an iOS developer in Copenhagen. Now, good iOS developers are hard to find, but in the autumn of 2013, not many companies were interested in a junior iOS developer who could only work part time because he wanted to finish his MSc studies. Looking over the &lt;a href="http://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews/"&gt;article&lt;/a&gt;, I realize now that I went through almost all the phases described there, so I can take them one at a time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Readiness&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I knew I didn&amp;rsquo;t have much experience, I knew I still had a lot to learn, but I had worked on 2 apps before, I could find may way around Xcode, I had a good background and I could learn fast. I also wasn&amp;rsquo;t afraid to admit that I don&amp;rsquo;t know something and I showed a genuine interest and curiosity about the things I didn&amp;rsquo;t know. With that in mind, I tried not to create false expectations.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lookout&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are some job sites in Denmark, but there weren&amp;rsquo;t many iOS developer positions advertised there. Also, they were all full time. &lt;/p&gt;

&lt;p&gt;I was told that in Denmark, the practice of sending unsolicited applications is quite common, so I gave it a try. I started looking for companies that were doing iOS development and sent unsolicited applications to the ones that interested me the most. The problem with unsolicited applications is that they take a lot of time to be replied to. I once got a reply 2 months after I sent the application. This whole process takes a lot of time. I didn&amp;rsquo;t want to have too many irons in the fire, so I started by sending one application to a company, and then waiting for it to reply. I got a reply after one week and I was invited for a coffee (which I mistakenly confused for an interview). The meeting was scheduled for the next week and, since they didn&amp;rsquo;t have an available position at the moment, I was basically at the same place where I started, but 2 weeks later. After that, I started sending unsolicited applications to 2 companies at the same time, so I could hopefully speed up the process.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Intro email&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is probably where I didn&amp;rsquo;t do enough, and it could well be the reason most of my unsolicited applications didn&amp;rsquo;t get any replies. My emails were quite short, I didn&amp;rsquo;t want to bother the reader (I still consider this a plus), but they were mostly about me. Somewhere along the lines of &amp;ldquo;I am a student, I did an iOS app in the GSoC programme, I want to work part time as an iOS developer&amp;rdquo;. Not much or nothing about why I sent this email to &lt;em&gt;that&lt;/em&gt; company. And that&amp;rsquo;s a pitty, because I actually didn&amp;rsquo;t send an email to all of them at once, but I had a list of companies, with pluses and minuses for each and I had them sorted according to my preference for them. If I had done this the right way, probably I would&amp;rsquo;ve got more replies.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Coffee&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The idea of getting coffee ☕️ with potential employers was new to me. So new that I actually considered an invitation for coffee to be an interview, which made me quite disappointed when I realised that there were no positions available. It all makes sense now, but back then it didn&amp;rsquo;t. I got invited for coffee with 2 different companies, and I actually enjoyed meeting people that do what I also wanted to do. I had some great meetings and I had hopes for a potential job interview with one of the companies, either in January or in the spring of 2014. &lt;/p&gt;

&lt;p&gt;A &amp;ldquo;coffee&amp;rdquo; was actually how I found my first iOS dev job. But since this is Denmark, that &amp;ldquo;coffee&amp;rdquo; was actually a beer 🍺. I was participating in the weekly NSCoderNight meetings, some casual get-togethers for iOS developers. That&amp;rsquo;s where I met &lt;a href="https://twitter.com/KasperWelner"&gt;Kasper&lt;/a&gt; and &lt;a href="https://twitter.com/jeghedderjohnny"&gt;Johnny&lt;/a&gt;, who are now my colleagues. They were looking for a senior iOS developer to join them at &lt;a href="http://www.nodesagency.com"&gt;Nodes&lt;/a&gt;. I had actually seen the job announcement for that position, but decided to ignore it since they needed a full time senior developer, while I was a junior who could only work part time. We talked a bit, each of us about the projects we were working on at the moment, I remember I showed a small demo and also a bit of code, and from there, things moved very quickly. Next day, Kasper contacted me saying that they talked to their CTO and if I was interested, they were open to a part time position as well. I was interested, I had an interview the following day and I started on Monday of the following week. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Interview&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The interview went on really well and the process was faster than I expected it to be (but that was probably a one time thing). First they told me about the company, then I told them about myself, about my background, studies, experience and current and future plans. I don&amp;rsquo;t actually remember being asked anything technical, but I suppose that&amp;rsquo;s because we talked a lot about code at NSCoderNight.&lt;/p&gt;

&lt;p&gt;A couple of hours after the interview ended I had been offered the job. I was probably lucky, because the company really needed to hire developers, but I like to see it as the universe&amp;rsquo;s way to make up for all the months of sending unsolicited applications with no reply 🙃.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Conclusion&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It was a happy ending for me, because I still work there (full time now) and I really enjoy what I&amp;rsquo;m doing. But this thing took a lot of time: I started my job on March 10, 2014. Between September and March, I sent a lot of unsolicited applications, I&amp;rsquo;ve been to some coffee meetings, I&amp;rsquo;ve been to a couple of interviews which didn&amp;rsquo;t really work out, I went to a few meetups and I met a good number of the iOS developers in Copenhagen. And most importantly, I kept working on my own small iOS projects in that period and I kept learning. &lt;/p&gt;
</content>
  </entry>
</feed>
